services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    build:
      context: .
      dockerfile: ./src/api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL}
      - OPENROUTER_TIMEOUT=${OPENROUTER_TIMEOUT}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./src/api:/app
    command: uv run uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build:
      context: .
      dockerfile: ./src/worker/Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL}
      - OPENROUTER_MODEL=${OPENROUTER_MODEL}
      - OPENROUTER_TIMEOUT=${OPENROUTER_TIMEOUT}
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./src/worker:/app
    command: uv run celery -A main worker --loglevel=info --concurrency=${CELERY_WORKER_CONCURRENCY:-4}
    deploy:
      replicas: ${WORKER_REPLICAS:-3}

  scheduler:
    build:
      context: .
      dockerfile: ./src/worker/Dockerfile
    environment:
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./src/worker:/app
    command: uv run celery -A main beat --loglevel=info

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    ports:
      - "3000:80"
    depends_on:
      - api

volumes:
  redis_data: